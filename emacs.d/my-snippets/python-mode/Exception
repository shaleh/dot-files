# -*- mode: snippet; *-
# name: Exception
# key: Exception
# binding: direct-keybinding
# --
class ${1:Exception}(${2:Exception}):
    """$3
    ${4:$
    (let* ((indent
            (concat "\n" (make-string (current-column) 32)))
           (args
            (mapconcat
             '(lambda (x)
                (if (not (string= (nth 0 x) ""))
                    (concat "    " (nth 0 x) ":")))
             (mapcar
              '(lambda (x)
                 (mapcar
                  (lambda (x)
                    (replace-regexp-in-string "[[:blank:]]*$" ""
                     (replace-regexp-in-string "^[[:blank:]]*" "" x))) x))
              (mapcar '(lambda (x) (split-string x "="))
                      (split-string yas-text ",")))
             indent)))
      (if (string= args "")
          (ignore)
        (mapconcat
         'identity
         (list "" "Args:" args)
         indent)))
    }
    """

    def __init__(self, $4):
        ${4:$
        (mapconcat
         '(lambda (x)
            (if (not (string= (nth 0 x) ""))
                (concat "self." (nth 0 x) " = " (nth 0 x))))
         (mapcar
          '(lambda (x)
             (mapcar
              '(lambda (x)
                 (replace-regexp-in-string "[[:blank:]]*$" ""
                  (replace-regexp-in-string "^[[:blank:]]*" "" x)))
              x))
          (mapcar '(lambda (x) (split-string x "="))
                  (split-string yas-text ",")))
         (concat "\n" (make-string (current-column) 32)))
        }
        $0
