#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en

My Emacs config in ORG mode.

* General Editing
#+BEGIN_SRC 
(setq enable-local-variables :safe)
(defvar recentf-list)
#+END_SRC

** browse kill ring

#+BEGIN_SRC emacs-lisp
(use-package browse-kill-ring
	     :ensure t)
#+END_SRC

** copy-as-format
Helps when pasting to various places.

#+BEGIN_SRC emacs-lisp
(use-package copy-as-format
	     :ensure t)
#+END_SRC

** find file in repository

#+BEGIN_SRC emacs-lisp
(use-package find-file-in-repository
	     :ensure t)
#+END_SRC

** move where I mean
#+BEGIN_SRC emacs-lisp
(use-package mwim
             :ensure t)
#+END_SRC
** string inflection
#+BEGIN_SRC emacs-lisp
(use-package string-inflection
             :ensure t)
#+END_SRC
** work on whole line or region

#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
             :ensure t)
#+END_SRC

* Searching
** deadgrep
Wilfred's amazing interface to ripgrep.

#+BEGIN_SRC emacs-lisp
(use-package deadgrep
	     :ensure t)
#+END_SRC

** google-this

#+BEGIN_SRC emacs-lisp
(use-package google-this
	     :ensure t)
#+END_SRC

* Programming
** Helpers and Tools
*** Fill Column Indicator
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
             :ensure t)
#+END_SRC
*** FIC mode

#+BEGIN_SRC emacs-lisp
(use-package fic-mode)
#+END_SRC

*** github browse file
Handy tool to generate a GitHub link from a link in source.

#+BEGIN_SRC emacs-lisp
(use-package github-browse-file
	     :ensure t)
#+END_SRC

*** Indent Guide
#+BEGIN_SRC emacs-lisp
(use-package indent-guide
             :ensure t)
#+END_SRC
*** magit

#+BEGIN_SRC emacs-lisp
(defun my/magit-kill-buffers ()
  "Restore window configuration and kill all Magit buffers."
  (interactive)
  (let ((buffers (magit-mode-get-buffers)))
    (magit-restore-window-configuration)
    (mapc #'kill-buffer buffers)))

(use-package magit
             :bind (:map magit-status-mode-map
                    ("q" . #'my/magit-kill-buffers))
	     :ensure t)
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
         ("s-p" . #'projectile-command-map))
  :ensure t)

(use-package perspective
  :bind (:map projectile-mode-map
         ("s-s" . #'projectile-persp-switch-project))
  :ensure t
 )
#+END_SRC
** Linting
*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
             :ensure t)
(use-package flycheck-rust
             :init
             (add-hook 'flycheck-mode-hook 'flycheck-rust-setup)
             :ensure t)
(use-package flycheck-yamllint
             :init
             (add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup)
             :ensure t)
#+END_SRC
** Languages
First, my common hook for most languages. It enables flycheck, flyspell, FIXME, line numbers, and more.
#+BEGIN_SRC emacs-lisp
;; Initially no known indented modes. Filled in as languages are used.
(defvar my/indented-modes '())

(defun my/common-programming-hook ()
   (fci-mode) ; Fill Column Indicator.
   (fic-mode) ; FIXME handling.
   (flyspell-prog-mode)
   (flycheck-mode)
   (if (boundp 'display-line-numbers)
       (setq display-line-numbers t)
     (linum-mode)
    )
   (my/enable-subword-mode)
   (hl-line-mode)
   (indent-guide-mode)
   (add-to-list 'my/indented-modes major-mode)
   (local-set-key (kbd "C-c i") #'string-inflection-all-cycle)
 )
#+END_SRC
*** C/C++
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook 'my/common-programming-hook)
(add-hook 'c-mode-common-hook
  (lambda()
    (local-set-key (kbd "C-x C-o") 'ff-find-other-file)
    (cscope-minor-mode)
   )
 )

(add-hook 'c-mode-hook
  (lambda()
    (c-set-style "bsd")  ; use BSD a base but use 4 space indents and no hanging braces
    (setq c-basic-offset 4)
    (c-set-offset 'substatement-open '0)
   )
 )

(add-hook 'c++-mode-hook
  (lambda()
    (c-set-style "stroustrup")
   )
 )
#+END_SRC
*** Coffeescript

#+BEGIN_SRC emacs-lisp
(use-package coffee-mode
	     :init
	     (add-hook 'coffee-mode-hook (lambda () (set (make-local-variable 'tab-width) 2)))
	     (add-hook 'coffee-mode-hook 'my/common-programming-hook)
	     :ensure t
 )
#+END_SRC

*** Python
#+BEGIN_SRC emacs-lisp
(use-package blacken
             :ensure t)
(add-hook 'python-mode-hook 'my/common-programming-hook)
(add-hook 'python-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c i") #'string-inflection-python-cycle)
            )
  )
#+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
             :init
             (add-hook 'rust-mode-hook 'my/common-programming-hook)
             :ensure t)
#+END_SRC
*** Bash/Shell
#+BEGIN_SRC emacs-lisp
(add-hook 'sh-mode-hook 'my/common-programming-hook)
#+END_SRC
* Text
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook
           (lambda ()
            (variable-pitch-mode 1)))
#+END_SRC
** Comma Separated Values
#+BEGIN_SRC emacs-lisp
(use-package csv-mode
             :ensure t)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
             :ensure t)
#+END_SRC
** ORG
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-cb" 'org-iswitchb)
(setq org-log-done t)
(setq org-directory (concat my/home-dir "org"))
(setq org-agenda-files (list (concat org-directory "/agendas")))
(setq org-default-notes-file (concat org-directory (convert-standard-filename "captured-notes.org")))
(setq org-startup-indented nil)
(setq org-startup-folded nil)
(setq org-enforce-todo-dependencies t)
(setq org-todo-keywords '((sequence "TODO" "IN_PROGRESS" "|" "DONE")))
#+END_SRC
* Eshell
#+BEGIN_SRC emacs-lisp
(require 'eshell)
(require 'em-smart)

(defun my/eshell-maybe-bol ()
  (interactive)
  (let ((p (point))
        )
    (eshell-bol)
    (if (= p (point))
        (beginning-of-line)
      )
    )
  )

(add-hook 'eshell-mode-hook
   (lambda ()
     (eshell/export "EDITOR=~/bin/edit")
     (eshell/addpath my/bin-dir "/usr/local/bin")
     (setq show-trailing-whitespace nil)
     (local-set-key (kbd "C-a") 'eshell-bol)
     (setq yas--dont-activate t)
    )
 )

(setq eshell-directory-name (concat user-emacs-directory (convert-standard-filename "eshell"))
      eshell-history-file-name (concat user-emacs-directory (convert-standard-filename "state/eshell-history"))
      eshell-last-dir-ring-file-name (concat user-emacs-directory (convert-standard-filename "state/eshell-lastdir"))
      eshell-where-to-jump 'begin
      eshell-review-quick-commands nil
      eshell-smart-space-goes-to-end t
 )

(setq eshell-prompt-function
  (lambda ()
    (concat (if (> (length (eshell/pwd)) 50)
               (let* ((split_path (split-string (eshell/pwd) "/"))
                      (first_char (lambda (s) (if (zerop (length s)) nil (substring s 0 1))))
                      (shortened (mapconcat 'identity (mapcar first_char (butlast split_path 3)) "/"))
                      (minimal_path_parts (reverse (delq nil (subseq (reverse split_path) 0 3))))
                      (minimal_path (mapconcat 'identity minimal_path_parts "/"))
                      )
                 (concat shortened "/" minimal_path)
                )
              (eshell/pwd)
             )
       " $ "
     )
   )
 )

(defun my/shell-here ()
  (interactive)
  (let ((cur default-directory))
    (split-window-sensibly)
    (other-window 1)
    (eshell)
    (eshell/cd cur)
    (insert "")
    (eshell-send-input)
   )
 )
#+END_SRC
* My personal packages lisp

#+BEGIN_SRC emacs-lisp
(use-package shaleh)
(use-package my-functions)
#+END_SRC

* Key bindings
** my global keybindings

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<home>")   'beginning-of-line)
(global-set-key (kbd "<end>")    'end-of-line)
(global-set-key (kbd "M-<home>") 'beginning-of-buffer)
(global-set-key (kbd "M-<end>")  'end-of-buffer)
(global-set-key (kbd "C-<home>") 'beginning-of-buffer)
(global-set-key (kbd "C-<end>")  'end-of-buffer)
(global-set-key (kbd "M-g")      'goto-line)
(global-set-key (kbd "M-<up>")   'shaleh-move-line-up)
(global-set-key (kbd "M-<down>") 'shaleh-move-line-down)
(global-set-key (kbd "C-a")      'mwim-beginning-of-code-or-line)
(global-set-key (kbd "C-r")      'isearch-backward-regexp)
(global-set-key (kbd "C-s")      'isearch-forward-regexp)
(global-set-key (kbd "C-z")      nil)  ;; No more shrinking!!
(global-set-key (kbd "C-c g")    'deadgrep)
(global-set-key (kbd "C-c y")    'browse-kill-ring)
(global-set-key (kbd "C-c #")    'comment-dwim) ; use C-u C-c # to uncomment
(global-set-key (kbd "C-c w s")  'copy-as-format-slack)
(global-set-key (kbd "C-c w g")  'copy-as-format-github)
(global-set-key (kbd "C-x C-d")  'my/find-related-file)
(global-set-key (kbd "C-x C-f")  'find-file-in-repository)
(global-set-key (kbd "C-x a r")  'align-regexp)
(global-set-key (kbd "C-x C-m")  'execute-extended-command)
(global-set-key (kbd "C-x C-r")  'my/recentf-ido-find-file)
;; s is the Windows key aka super. On Macs this is the Command key.
(global-set-key (kbd "s-b")      'browse-url)
(global-set-key (kbd "s-g")      'google-this)
;; Stop flipping into overwrite mode!!
(global-unset-key [insert])
#+END_SRC

** Set META key to the 'option' key on MacOS

#+BEGIN_SRC emacs-lisp
(setq mac-option-key-is-meta t)
(setq mac-command-key-is-meta nil)
(setq mac-command-modifier nil)
(setq mac-option-modifier 'meta)
#+END_SRC

* Aliases

#+BEGIN_SRC emacs-lisp
(defalias 'qr 'query-replace)
(defalias 'qrr 'query-replace-regexp)
#+END_SRC

* Look & Feel
** Remove startup welcome screen
The code block below toggles off the welcome startup screen.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** Minimize the UI

#+BEGIN_SRC emacs-lisp
(when (fboundp 'tool-bar-mode)
   (tool-bar-mode -1)
 )

(when (fboundp 'scroll-bar-mode)
   (scroll-bar-mode -1)
 )
#+END_SRC

** Show column and line in mode bar

#+BEGIN_SRC emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)
#+END_SRC

** Theme support
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path (concat user-emacs-directory (convert-standard-filename "themes")))
(use-package nord-theme
             :ensure t)
(use-package solarized-theme
             :ensure t)
(use-package gruvbox-theme
             :ensure t)
(load-theme 'nord)
#+END_SRC
** Set default FACE on MacOS

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
		    ;; :family "Inconsolata" :height 140 :weight 'normal
		    :family "Hasklig" :height 120 :weight 'normal)
#+END_SRC

** Frame size

#+BEGIN_SRC emacs-lisp
(when window-system (set-frame-size (selected-frame) 100 60))
#+END_SRC

* Behavior
** Common
*** Show parens

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

*** Highlight when searching and replacing

#+BEGIN_SRC emacs-lisp
(setq
      search-highlight t         ;; highlight when searching
      query-replace-highlight t  ;; and replacing
 )
#+END_SRC
*** Unique Buffer name style

#+BEGIN_SRC emacs-lisp
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+END_SRC

** IDO

#+BEGIN_SRC emacs-lisp
(ido-mode 'both) ;; for buffers and files
(setq
  ido-save-directory-list-file (concat user-emacs-directory (convert-standard-filename "state/ido.last"))
  ido-enable-tramp-completion nil
  ido-case-fold  t
  ido-enable-last-directory-history t
  ido-max-work-directory-list 30
  ido-max-work-file-list      50
  ido-use-filename-at-point nil
  ido-use-url-at-point nil
  ido-enable-flex-matching nil
  ido-confirm-unique-completion t
  ido-ignore-buffers (quote ("\\` " "*.+*"))
 )
#+END_SRC

* Things to load on startup
** Load eshell at end of startup

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
  (lambda ()
    (eshell)))
#+END_SRC

** Setup emacs as a server

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
  (lambda ()
    (server-start)))

(defun my/kill-buffer-or-server-edit ()
  (interactive)
  (if server-buffer-clients
      (server-edit)
    (kill-buffer)))

;; make C-x k work for emacsclient sessions too.
(add-hook 'server-switch-hook
  (lambda ()
    (local-set-key (kbd "C-x k") 'my/kill-buffer-or-server-edit)))
#+END_SRC
